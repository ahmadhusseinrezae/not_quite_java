
//----------------------------------------------------
// The following code was generated by CUP v0.11c 20160501
//----------------------------------------------------

package notquitejava.syntax;

import notquitejava.ast.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import frontend.SyntaxError;
import frontend.AstHelper;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import static notquitejava.ast.NQJ.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11c 20160501 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class NotQuiteJavaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return NotQuiteJavaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public NotQuiteJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public NotQuiteJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public NotQuiteJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\005\007\000\002\005\011\000\002\006\005\000" +
    "\002\006\004\000\002\006\002\000\002\007\004\000\002" +
    "\010\010\000\002\011\004\000\002\011\002\000\002\012" +
    "\005\000\002\012\002\000\002\026\004\000\002\026\002" +
    "\000\002\027\005\000\002\027\002\000\002\014\003\000" +
    "\002\014\003\000\002\013\004\000\002\013\004\000\002" +
    "\015\004\000\002\015\002\000\002\016\005\000\002\020" +
    "\004\000\002\020\002\000\002\021\003\000\002\021\004" +
    "\000\002\017\003\000\002\017\011\000\002\017\007\000" +
    "\002\017\005\000\002\017\004\000\002\017\006\000\002" +
    "\017\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\004\000\002\022\004\000" +
    "\002\022\006\000\002\022\003\000\002\023\010\000\002" +
    "\023\010\000\002\023\003\000\002\024\005\000\002\024" +
    "\010\000\002\024\006\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\005\000\002\024\003\000\002\025\006\000\002" +
    "\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\032\002\ufffe\010\025\017\017\023\016\045" +
    "\006\055\004\102\013\121\011\122\023\123\030\124\021" +
    "\125\015\001\002\000\004\125\200\001\002\000\032\002" +
    "\ufffc\010\ufffc\017\ufffc\023\ufffc\045\ufffc\055\ufffc\102\ufffc" +
    "\121\ufffc\122\ufffc\123\ufffc\124\ufffc\125\ufffc\001\002\000" +
    "\010\077\uffeb\101\uffeb\125\uffeb\001\002\000\004\125\123" +
    "\001\002\000\032\002\ufffd\010\ufffd\017\ufffd\023\ufffd\045" +
    "\ufffd\055\ufffd\102\ufffd\121\ufffd\122\ufffd\123\ufffd\124\ufffd" +
    "\125\ufffd\001\002\000\034\077\uffc9\100\uffc9\103\uffc9\104" +
    "\uffc9\105\uffc9\106\uffc9\111\uffc9\112\uffc9\113\uffc9\114\uffc9" +
    "\115\uffc9\116\uffc9\117\uffc9\001\002\000\012\077\uffc3\101" +
    "\104\104\uffc3\125\uffe7\001\002\000\026\010\025\023\016" +
    "\102\013\110\043\113\035\121\011\122\023\123\030\124" +
    "\021\125\041\001\002\000\004\002\117\001\002\000\012" +
    "\077\uffc1\101\uffc1\104\uffc1\125\uffc1\001\002\000\034\077" +
    "\uffc6\100\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\111\uffc6" +
    "\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6\001" +
    "\002\000\010\077\uffec\101\uffec\125\uffec\001\002\000\006" +
    "\101\104\125\uffe7\001\002\000\034\077\uffc7\100\uffc7\103" +
    "\uffc7\104\uffc7\105\uffc7\106\uffc7\111\uffc7\112\uffc7\113\uffc7" +
    "\114\uffc7\115\uffc7\116\uffc7\117\uffc7\001\002\000\004\002" +
    "\001\001\002\000\034\077\uffc8\100\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\106\uffc8\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115" +
    "\uffc8\116\uffc8\117\uffc8\001\002\000\032\002\ufffe\010\025" +
    "\017\017\023\016\045\006\055\004\102\013\121\011\122" +
    "\023\123\030\124\021\125\015\001\002\000\010\017\017" +
    "\045\006\125\077\001\002\000\034\077\074\100\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\106\uffcd\111\uffcd\112\uffcd\113\uffcd" +
    "\114\uffcd\115\uffcd\116\uffcd\117\uffcd\001\002\000\004\104" +
    "\031\001\002\000\034\077\uffc5\100\uffc5\103\uffc5\104\uffc5" +
    "\105\uffc5\106\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\115" +
    "\uffc5\116\uffc5\117\uffc5\001\002\000\006\071\033\125\032" +
    "\001\002\000\044\077\uffc0\100\uffc0\101\uffc0\102\034\103" +
    "\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\111\uffc0\112\uffc0" +
    "\113\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\125\uffc0\001" +
    "\002\000\034\077\uffcc\100\uffcc\103\uffcc\104\uffcc\105\uffcc" +
    "\106\uffcc\111\uffcc\112\uffcc\113\uffcc\114\uffcc\115\uffcc\116" +
    "\uffcc\117\uffcc\001\002\000\030\010\025\023\016\102\013" +
    "\103\uffef\110\043\113\035\121\011\122\023\123\030\124" +
    "\021\125\041\001\002\000\026\010\025\023\016\102\013" +
    "\110\043\113\035\121\011\122\023\123\030\124\021\125" +
    "\041\001\002\000\034\077\uffc3\100\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\111\uffc3\112\uffc3\113\uffc3\114\uffc3\115" +
    "\uffc3\116\uffc3\117\uffc3\001\002\000\032\100\uffd0\103\uffd0" +
    "\104\031\105\uffd0\106\uffd0\111\uffd0\112\uffd0\113\uffd0\114" +
    "\uffd0\115\uffd0\116\uffd0\117\uffd0\001\002\000\004\103\072" +
    "\001\002\000\044\077\uffc1\100\uffc1\101\uffc1\102\067\103" +
    "\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\111\uffc1\112\uffc1" +
    "\113\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\125\uffc1\001" +
    "\002\000\024\103\uffed\106\064\111\046\112\047\113\050" +
    "\114\053\115\052\116\051\117\045\001\002\000\026\010" +
    "\025\023\016\102\013\110\043\113\035\121\011\122\023" +
    "\123\030\124\021\125\041\001\002\000\030\100\uffd3\103" +
    "\uffd3\105\uffd3\106\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3" +
    "\115\uffd3\116\uffd3\117\uffd3\001\002\000\026\010\025\023" +
    "\016\102\013\110\043\113\035\121\011\122\023\123\030" +
    "\124\021\125\041\001\002\000\026\010\025\023\016\102" +
    "\013\110\043\113\035\121\011\122\023\123\030\124\021" +
    "\125\041\001\002\000\026\010\025\023\016\102\013\110" +
    "\043\113\035\121\011\122\023\123\030\124\021\125\041" +
    "\001\002\000\026\010\025\023\016\102\013\110\043\113" +
    "\035\121\011\122\023\123\030\124\021\125\041\001\002" +
    "\000\026\010\025\023\016\102\013\110\043\113\035\121" +
    "\011\122\023\123\030\124\021\125\041\001\002\000\026" +
    "\010\025\023\016\102\013\110\043\113\035\121\011\122" +
    "\023\123\030\124\021\125\041\001\002\000\026\010\025" +
    "\023\016\102\013\110\043\113\035\121\011\122\023\123" +
    "\030\124\021\125\041\001\002\000\030\100\uffd7\103\uffd7" +
    "\105\uffd7\106\uffd7\111\uffd7\112\uffd7\113\uffd7\114\uffd7\115" +
    "\uffd7\116\uffd7\117\uffd7\001\002\000\030\100\uffd6\103\uffd6" +
    "\105\uffd6\106\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6\115" +
    "\uffd6\116\uffd6\117\uffd6\001\002\000\030\100\uffd4\103\uffd4" +
    "\105\uffd4\106\uffd4\111\uffd4\112\047\113\050\114\053\115" +
    "\052\116\uffd4\117\uffd4\001\002\000\030\100\uffd8\103\uffd8" +
    "\105\uffd8\106\uffd8\111\uffd8\112\uffd8\113\uffd8\114\053\115" +
    "\052\116\uffd8\117\uffd8\001\002\000\030\100\uffd9\103\uffd9" +
    "\105\uffd9\106\uffd9\111\uffd9\112\uffd9\113\uffd9\114\053\115" +
    "\052\116\uffd9\117\uffd9\001\002\000\030\100\uffda\103\uffda" +
    "\105\uffda\106\uffda\111\uffda\112\047\113\050\114\053\115" +
    "\052\116\051\117\045\001\002\000\030\100\uffd5\103\uffd5" +
    "\105\uffd5\106\uffd5\111\uffd5\112\047\113\050\114\053\115" +
    "\052\116\051\117\uffd5\001\002\000\004\103\ufff0\001\002" +
    "\000\026\010\025\023\016\102\013\110\043\113\035\121" +
    "\011\122\023\123\030\124\021\125\041\001\002\000\024" +
    "\103\uffed\106\064\111\046\112\047\113\050\114\053\115" +
    "\052\116\051\117\045\001\002\000\004\103\uffee\001\002" +
    "\000\030\010\025\023\016\102\013\103\uffef\110\043\113" +
    "\035\121\011\122\023\123\030\124\021\125\041\001\002" +
    "\000\004\103\071\001\002\000\030\100\uffd1\103\uffd1\105" +
    "\uffd1\106\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1\115\uffd1" +
    "\116\uffd1\117\uffd1\001\002\000\034\077\uffcb\100\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\111\uffcb\112\uffcb\113\uffcb" +
    "\114\uffcb\115\uffcb\116\uffcb\117\uffcb\001\002\000\030\100" +
    "\uffd2\103\uffd2\105\uffd2\106\uffd2\111\uffd2\112\uffd2\113\uffd2" +
    "\114\uffd2\115\uffd2\116\uffd2\117\uffd2\001\002\000\026\010" +
    "\025\023\016\102\013\110\043\113\035\121\011\122\023" +
    "\123\030\124\021\125\041\001\002\000\022\100\076\111" +
    "\046\112\047\113\050\114\053\115\052\116\051\117\045" +
    "\001\002\000\042\077\uffc2\100\uffc2\101\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\106\uffc2\107\uffc2\111\uffc2\112\uffc2\113\uffc2" +
    "\114\uffc2\115\uffc2\116\uffc2\117\uffc2\125\uffc2\001\002\000" +
    "\006\077\110\102\107\001\002\000\004\077\101\001\002" +
    "\000\026\010\025\023\016\102\013\110\043\113\035\121" +
    "\011\122\023\123\030\124\021\125\041\001\002\000\022" +
    "\100\103\111\046\112\047\113\050\114\053\115\052\116" +
    "\051\117\045\001\002\000\034\100\uffe7\101\104\103\uffe7" +
    "\104\uffe7\105\uffe7\106\uffe7\111\uffe7\112\uffe7\113\uffe7\114" +
    "\uffe7\115\uffe7\116\uffe7\117\uffe7\001\002\000\036\100\uffe7" +
    "\101\104\103\uffe7\104\uffe7\105\uffe7\106\uffe7\111\uffe7\112" +
    "\uffe7\113\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\125\uffe7" +
    "\001\002\000\032\100\uffcf\103\uffcf\104\uffcf\105\uffcf\106" +
    "\uffcf\111\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\116\uffcf" +
    "\117\uffcf\001\002\000\034\100\uffe8\103\uffe8\104\uffe8\105" +
    "\uffe8\106\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\117\uffe8\125\uffe8\001\002\000\004\103\114\001" +
    "\002\000\026\010\025\023\016\102\013\110\043\113\035" +
    "\121\011\122\023\123\030\124\021\125\041\001\002\000" +
    "\022\100\112\111\046\112\047\113\050\114\053\115\052" +
    "\116\051\117\045\001\002\000\034\100\uffe7\101\104\103" +
    "\uffe7\104\uffe7\105\uffe7\106\uffe7\111\uffe7\112\uffe7\113\uffe7" +
    "\114\uffe7\115\uffe7\116\uffe7\117\uffe7\001\002\000\032\100" +
    "\uffce\103\uffce\104\uffce\105\uffce\106\uffce\111\uffce\112\uffce" +
    "\113\uffce\114\uffce\115\uffce\116\uffce\117\uffce\001\002\000" +
    "\034\077\uffca\100\uffca\103\uffca\104\uffca\105\uffca\106\uffca" +
    "\111\uffca\112\uffca\113\uffca\114\uffca\115\uffca\116\uffca\117" +
    "\uffca\001\002\000\004\002\uffff\001\002\000\004\125\uffea" +
    "\001\002\000\004\002\000\001\002\000\022\103\121\111" +
    "\046\112\047\113\050\114\053\115\052\116\051\117\045" +
    "\001\002\000\034\077\uffc4\100\uffc4\103\uffc4\104\uffc4\105" +
    "\uffc4\106\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4\115\uffc4" +
    "\116\uffc4\117\uffc4\001\002\000\004\125\uffe9\001\002\000" +
    "\004\102\124\001\002\000\030\010\025\017\017\023\016" +
    "\045\006\102\013\103\ufff3\121\011\122\023\123\030\124" +
    "\021\125\015\001\002\000\006\103\ufff1\106\174\001\002" +
    "\000\004\125\173\001\002\000\004\103\130\001\002\000" +
    "\004\075\131\001\002\000\046\003\145\010\025\014\140" +
    "\017\017\023\016\041\136\045\006\066\135\075\131\076" +
    "\uffe4\102\013\110\043\113\035\121\011\122\023\123\030" +
    "\124\021\125\041\001\002\000\034\002\ufff5\010\ufff5\017" +
    "\ufff5\023\ufff5\045\ufff5\055\ufff5\076\ufff5\102\ufff5\121\ufff5" +
    "\122\ufff5\123\ufff5\124\ufff5\125\ufff5\001\002\000\046\003" +
    "\uffe3\010\uffe3\014\uffe3\017\uffe3\023\uffe3\041\uffe3\045\uffe3" +
    "\066\uffe3\075\uffe3\076\uffe3\102\uffe3\110\uffe3\113\uffe3\121" +
    "\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\001\002\000\022" +
    "\105\172\111\046\112\047\113\050\114\053\115\052\116" +
    "\051\117\045\001\002\000\004\102\166\001\002\000\026" +
    "\010\025\023\016\102\013\110\043\113\035\121\011\122" +
    "\023\123\030\124\021\125\041\001\002\000\034\077\uffc3" +
    "\101\104\104\uffc3\105\uffc3\107\157\111\uffc3\112\uffc3\113" +
    "\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\125\uffe7\001\002" +
    "\000\004\102\152\001\002\000\050\003\uffe1\010\uffe1\014" +
    "\uffe1\017\uffe1\023\uffe1\032\uffe1\041\uffe1\045\uffe1\066\uffe1" +
    "\075\uffe1\076\uffe1\102\uffe1\110\uffe1\113\uffe1\121\uffe1\122" +
    "\uffe1\123\uffe1\124\uffe1\125\uffe1\001\002\000\004\105\151" +
    "\001\002\000\046\003\145\010\025\014\140\017\017\023" +
    "\016\041\136\045\006\066\135\075\131\076\uffe4\102\013" +
    "\110\043\113\035\121\011\122\023\123\030\124\021\125" +
    "\041\001\002\000\004\076\147\001\002\000\004\105\146" +
    "\001\002\000\050\003\uffdb\010\uffdb\014\uffdb\017\uffdb\023" +
    "\uffdb\032\uffdb\041\uffdb\045\uffdb\066\uffdb\075\uffdb\076\uffdb" +
    "\102\uffdb\110\uffdb\113\uffdb\121\uffdb\122\uffdb\123\uffdb\124" +
    "\uffdb\125\uffdb\001\002\000\054\002\uffe6\003\uffe6\010\uffe6" +
    "\014\uffe6\017\uffe6\023\uffe6\032\uffe6\041\uffe6\045\uffe6\055" +
    "\uffe6\066\uffe6\075\uffe6\076\uffe6\102\uffe6\110\uffe6\113\uffe6" +
    "\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6\001\002\000" +
    "\004\076\uffe5\001\002\000\046\003\uffe2\010\uffe2\014\uffe2" +
    "\017\uffe2\023\uffe2\041\uffe2\045\uffe2\066\uffe2\075\uffe2\076" +
    "\uffe2\102\uffe2\110\uffe2\113\uffe2\121\uffe2\122\uffe2\123\uffe2" +
    "\124\uffe2\125\uffe2\001\002\000\026\010\025\023\016\102" +
    "\013\110\043\113\035\121\011\122\023\123\030\124\021" +
    "\125\041\001\002\000\022\103\154\111\046\112\047\113" +
    "\050\114\053\115\052\116\051\117\045\001\002\000\040" +
    "\003\145\010\025\014\140\023\016\041\136\066\135\075" +
    "\131\102\013\110\043\113\035\121\011\122\023\123\030" +
    "\124\021\125\041\001\002\000\004\032\162\001\002\000" +
    "\030\077\uffc3\104\uffc3\105\uffc3\107\157\111\uffc3\112\uffc3" +
    "\113\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\001\002\000" +
    "\026\010\025\023\016\102\013\110\043\113\035\121\011" +
    "\122\023\123\030\124\021\125\041\001\002\000\022\105" +
    "\161\111\046\112\047\113\050\114\053\115\052\116\051" +
    "\117\045\001\002\000\050\003\uffdc\010\uffdc\014\uffdc\017" +
    "\uffdc\023\uffdc\032\uffdc\041\uffdc\045\uffdc\066\uffdc\075\uffdc" +
    "\076\uffdc\102\uffdc\110\uffdc\113\uffdc\121\uffdc\122\uffdc\123" +
    "\uffdc\124\uffdc\125\uffdc\001\002\000\040\003\145\010\025" +
    "\014\140\023\016\041\136\066\135\075\131\102\013\110" +
    "\043\113\035\121\011\122\023\123\030\124\021\125\041" +
    "\001\002\000\050\003\uffe0\010\uffe0\014\uffe0\017\uffe0\023" +
    "\uffe0\032\uffe0\041\uffe0\045\uffe0\066\uffe0\075\uffe0\076\uffe0" +
    "\102\uffe0\110\uffe0\113\uffe0\121\uffe0\122\uffe0\123\uffe0\124" +
    "\uffe0\125\uffe0\001\002\000\022\105\165\111\046\112\047" +
    "\113\050\114\053\115\052\116\051\117\045\001\002\000" +
    "\050\003\uffde\010\uffde\014\uffde\017\uffde\023\uffde\032\uffde" +
    "\041\uffde\045\uffde\066\uffde\075\uffde\076\uffde\102\uffde\110" +
    "\uffde\113\uffde\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde" +
    "\001\002\000\026\010\025\023\016\102\013\110\043\113" +
    "\035\121\011\122\023\123\030\124\021\125\041\001\002" +
    "\000\022\103\170\111\046\112\047\113\050\114\053\115" +
    "\052\116\051\117\045\001\002\000\040\003\145\010\025" +
    "\014\140\023\016\041\136\066\135\075\131\102\013\110" +
    "\043\113\035\121\011\122\023\123\030\124\021\125\041" +
    "\001\002\000\050\003\uffdf\010\uffdf\014\uffdf\017\uffdf\023" +
    "\uffdf\032\uffdf\041\uffdf\045\uffdf\066\uffdf\075\uffdf\076\uffdf" +
    "\102\uffdf\110\uffdf\113\uffdf\121\uffdf\122\uffdf\123\uffdf\124" +
    "\uffdf\125\uffdf\001\002\000\050\003\uffdd\010\uffdd\014\uffdd" +
    "\017\uffdd\023\uffdd\032\uffdd\041\uffdd\045\uffdd\066\uffdd\075" +
    "\uffdd\076\uffdd\102\uffdd\110\uffdd\113\uffdd\121\uffdd\122\uffdd" +
    "\123\uffdd\124\uffdd\125\uffdd\001\002\000\010\103\ufff6\105" +
    "\ufff6\106\ufff6\001\002\000\026\010\025\017\017\023\016" +
    "\045\006\102\013\121\011\122\023\123\030\124\021\125" +
    "\015\001\002\000\004\103\ufff4\001\002\000\006\103\ufff1" +
    "\106\174\001\002\000\004\103\ufff2\001\002\000\006\044" +
    "\202\075\201\001\002\000\030\010\025\017\017\023\016" +
    "\045\006\076\ufff7\102\013\121\011\122\023\123\030\124" +
    "\021\125\015\001\002\000\004\125\203\001\002\000\004" +
    "\075\204\001\002\000\030\010\025\017\017\023\016\045" +
    "\006\076\ufff7\102\013\121\011\122\023\123\030\124\021" +
    "\125\015\001\002\000\030\010\025\017\017\023\016\045" +
    "\006\076\ufff7\102\013\121\011\122\023\123\030\124\021" +
    "\125\015\001\002\000\004\125\214\001\002\000\004\105" +
    "\212\001\002\000\004\076\211\001\002\000\032\002\ufffa" +
    "\010\ufffa\017\ufffa\023\ufffa\045\ufffa\055\ufffa\102\ufffa\121" +
    "\ufffa\122\ufffa\123\ufffa\124\ufffa\125\ufffa\001\002\000\030" +
    "\010\025\017\017\023\016\045\006\076\ufff7\102\013\121" +
    "\011\122\023\123\030\124\021\125\015\001\002\000\004" +
    "\076\ufff9\001\002\000\006\102\124\105\ufff6\001\002\000" +
    "\004\076\ufff8\001\002\000\004\076\217\001\002\000\032" +
    "\002\ufffb\010\ufffb\017\ufffb\023\ufffb\045\ufffb\055\ufffb\102" +
    "\ufffb\121\ufffb\122\ufffb\123\ufffb\124\ufffb\125\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\026\002\013\003\021\004\023\005\007\010" +
    "\004\013\006\014\017\023\026\024\025\025\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\121\001\001\000\012\022\117\023\036\024\025\025" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\114\004\023\005\007\010\004\013\006\014\017\023" +
    "\026\024\025\025\011\001\001\000\004\014\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\041\023\036\024\025\025\035\026\037\001\001\000" +
    "\012\022\072\023\036\024\025\025\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\062\001\001\000\012\022\043\023\036" +
    "\024\025\025\035\001\001\000\002\001\001\000\012\022" +
    "\061\023\036\024\025\025\035\001\001\000\012\022\060" +
    "\023\036\024\025\025\035\001\001\000\012\022\057\023" +
    "\036\024\025\025\035\001\001\000\012\022\056\023\036" +
    "\024\025\025\035\001\001\000\012\022\055\023\036\024" +
    "\025\025\035\001\001\000\012\022\054\023\036\024\025" +
    "\025\035\001\001\000\012\022\053\023\036\024\025\025" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\064" +
    "\023\036\024\025\025\035\001\001\000\004\027\065\001" +
    "\001\000\002\001\001\000\014\022\041\023\036\024\025" +
    "\025\035\026\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\074" +
    "\023\036\024\025\025\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\101\023\036\024\025\025\035\001\001\000\002\001" +
    "\001\000\004\015\104\001\001\000\004\015\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\110\023\036\024\025\025\035\001\001\000\002" +
    "\001\001\000\004\015\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\124\011\126\013\125" +
    "\014\017\023\026\024\025\025\011\001\001\000\004\012" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\131\001\001\000\030\007\141\013\125\014\017\016" +
    "\140\017\132\020\143\021\142\022\133\023\036\024\025" +
    "\025\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\163\023\036" +
    "\024\025\025\035\001\001\000\004\015\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\141\013\125\014\017\016\140\017\132\020\147\021" +
    "\142\022\133\023\036\024\025\025\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\152" +
    "\023\036\024\025\025\035\001\001\000\002\001\001\000" +
    "\016\016\140\017\154\022\133\023\036\024\025\025\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\157\023\036\024\025\025\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\140\017\162\022\133\023" +
    "\036\024\025\025\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\166\023\036\024" +
    "\025\025\035\001\001\000\002\001\001\000\016\016\140" +
    "\017\170\022\133\023\036\024\025\025\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\175\013\125\014\017\023\026\024\025\025\011\001" +
    "\001\000\002\001\001\000\004\012\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\215\007\206\010" +
    "\204\013\205\014\017\023\026\024\025\025\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\207\007" +
    "\206\010\204\013\205\014\017\023\026\024\025\025\011" +
    "\001\001\000\022\006\214\007\206\010\204\013\205\014" +
    "\017\023\026\024\025\025\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\212\007\206\010\204\013\205\014\017\023\026" +
    "\024\025\025\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$NotQuiteJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$NotQuiteJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$NotQuiteJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Consumer<SyntaxError> onError;

    public void onError(Consumer<SyntaxError> onError) {
        this.onError = onError;
    }
    

    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();
        
        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();
            
            message.append(s.getName());
            
            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }
        
        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }
        
        
        SyntaxError err = new SyntaxError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // ignore
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$NotQuiteJavaParser$actions {
  private final NotQuiteJavaParser parser;

  /** Constructor */
  CUP$NotQuiteJavaParser$actions(NotQuiteJavaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$NotQuiteJavaParser$do_action_part00000000(
    int                        CUP$NotQuiteJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$NotQuiteJavaParser$parser,
    java.util.Stack            CUP$NotQuiteJavaParser$stack,
    int                        CUP$NotQuiteJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$NotQuiteJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$NotQuiteJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= topLevelDeclList 
            {
              NQJProgram RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJTopLevelDeclList d = (NQJTopLevelDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.program(d); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJProgram start_val = (NQJProgram)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$NotQuiteJavaParser$parser.done_parsing();
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // topLevelDeclList ::= topLevelDecl topLevelDeclList 
            {
              NQJTopLevelDeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJTopLevelDecl d = (NQJTopLevelDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJTopLevelDeclList l = (NQJTopLevelDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.add(0, d); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDeclList",1, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // topLevelDeclList ::= 
            {
              NQJTopLevelDeclList RESULT =null;
		 RESULT = TopLevelDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDeclList",1, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // topLevelDecl ::= classDecl 
            {
              NQJTopLevelDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJClassDecl c = (NQJClassDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",2, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // topLevelDecl ::= functionDecl 
            {
              NQJTopLevelDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJFunctionDecl f = (NQJFunctionDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = f; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",2, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDecl ::= CLASS ID LBRACE memberDeclList RBRACE 
            {
              NQJClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJMemberDeclList members = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = AstHelper.classDecl(name, null, members); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDecl ::= CLASS ID EXTENDS ID LBRACE memberDeclList RBRACE 
            {
              NQJClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJMemberDeclList members = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = AstHelper.classDecl(name, ext, members); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // memberDeclList ::= varDecl SEMI memberDeclList 
            {
              NQJMemberDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJMemberDeclList l = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.add(0, v); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclList",4, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // memberDeclList ::= functionDecl memberDeclList 
            {
              NQJMemberDeclList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJFunctionDecl m = (NQJFunctionDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJMemberDeclList l = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.add(0, m); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclList",4, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // memberDeclList ::= 
            {
              NQJMemberDeclList RESULT =null;
		 RESULT = MemberDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclList",4, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDecl ::= type ID 
            {
              NQJVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJType t = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = VarDecl(t, n); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functionDecl ::= type ID LPAREN paramList RPAREN block 
            {
              NQJFunctionDecl RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		NQJType returnType = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJVarDeclList params = (NQJVarDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJBlock body = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = FunctionDecl(returnType, name, params, body); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("functionDecl",6, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramList ::= varDecl paramListRest 
            {
              NQJVarDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJVarDeclList l = (NQJVarDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.addFront(v); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramList",7, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramList ::= 
            {
              NQJVarDeclList RESULT =null;
		 RESULT = VarDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramList",7, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramListRest ::= COMMA varDecl paramListRest 
            {
              NQJVarDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJVarDeclList r = (NQJVarDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = r; r.addFront(v); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramListRest",8, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramListRest ::= 
            {
              NQJVarDeclList RESULT =null;
		 RESULT = VarDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramListRest",8, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exprList ::= expr exprListRest 
            {
              NQJExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExprList l = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.addFront(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprList",20, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exprList ::= 
            {
              NQJExprList RESULT =null;
		 RESULT = ExprList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprList",20, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exprListRest ::= COMMA expr exprListRest 
            {
              NQJExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExprList r = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = r; r.addFront(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprListRest",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exprListRest ::= 
            {
              NQJExprList RESULT =null;
		 RESULT = ExprList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprListRest",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // baseType ::= BOOLEAN 
            {
              NQJType RESULT =null;
		 RESULT = TypeBool(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("baseType",10, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // baseType ::= INT 
            {
              NQJType RESULT =null;
		 RESULT = TypeInt(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("baseType",10, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= baseType brackets 
            {
              NQJType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJType t = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.buildArrayType(t, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= exprL brackets 
            {
              NQJType RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExprL l = (NQJExprL)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.buildArrayType(l, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // brackets ::= LRBRACKET brackets 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = b+1; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("brackets",11, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // brackets ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("brackets",11, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block ::= LBRACE statementList RBRACE 
            {
              NQJBlock RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJBlock l = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = l; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statementList ::= blockStatement statementList 
            {
              NQJBlock RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJStatement s = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJBlock l = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.addFront(s); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",14, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statementList ::= 
            {
              NQJBlock RESULT =null;
		 RESULT = Block(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",14, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // blockStatement ::= statement 
            {
              NQJStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJStatement s = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("blockStatement",15, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // blockStatement ::= varDecl SEMI 
            {
              NQJStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = v; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("blockStatement",15, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= block 
            {
              NQJStatement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJBlock b = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = b; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              NQJStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		NQJExpr c = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJStatement t = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJStatement e = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = StmtIf(c, t, e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= WHILE LPAREN expr RPAREN statement 
            {
              NQJStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr c = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJStatement b = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = StmtWhile(c, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= RETURN expr SEMI 
            {
              NQJStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = StmtReturn(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= expr SEMI 
            {
              NQJStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = StmtExpr(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= exprL EQ expr SEMI 
            {
              NQJStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		NQJExprL l = (NQJExprL)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = StmtAssign(l, r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= error SEMI 
            {
              NQJStatement RESULT =null;
		 RESULT = Block(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr AND expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, And(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr PLUS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Plus(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr MINUS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Minus(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr TIMES expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Times(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr DIV expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Div(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr EQUALS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Equals(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr LESS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Less(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NEG expr 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprUnary(Negate(), e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= MINUS expr 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprUnary(UnaryMinus(), e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= ID LPAREN exprList RPAREN 
            {
              NQJExpr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExprList args = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = FunctionCall(m, args); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr2 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = e; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr2 ::= NEW baseType LBRACKET expr RBRACKET brackets 
            {
              NQJExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		NQJType t = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr size = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.newArray(t, size, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr2 ::= NEW ID LBRACKET expr RBRACKET brackets 
            {
              NQJExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr size = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.newArray(TypeClass(t), size, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr2 ::= expr3 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = e; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr3 ::= expr2 DOT LENGTH 
            {
              NQJExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr a = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		 RESULT = ArrayLength(a); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr3 ::= expr2 DOT ID LPAREN exprList RPAREN 
            {
              NQJExpr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExprList args = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = MethodCall(r, m, args); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr3 ::= NEW ID LPAREN RPAREN 
            {
              NQJExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		 RESULT = NewObject(c); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr3 ::= TRUE 
            {
              NQJExpr RESULT =null;
		 RESULT = BoolConst(true); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr3 ::= FALSE 
            {
              NQJExpr RESULT =null;
		 RESULT = BoolConst(false); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr3 ::= NUMBER 
            {
              NQJExpr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = Number(Integer.parseInt(n)); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr3 ::= THIS 
            {
              NQJExpr RESULT =null;
		 RESULT = ExprThis(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr3 ::= NULL 
            {
              NQJExpr RESULT =null;
		 RESULT = ExprNull(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr3 ::= LPAREN expr RPAREN 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = e; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr3 ::= exprL 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExprL e = (NQJExprL)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = Read(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprL ::= expr3 LBRACKET expr RBRACKET 
            {
              NQJExprL RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		NQJExpr a = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr i = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = ArrayLookup(a, i); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprL",19, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprL ::= ID 
            {
              NQJExprL RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = VarUse(i); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprL",19, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprL ::= expr2 DOT ID 
            {
              NQJExprL RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = FieldAccess(r, n); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprL",19, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$NotQuiteJavaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$NotQuiteJavaParser$do_action(
    int                        CUP$NotQuiteJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$NotQuiteJavaParser$parser,
    java.util.Stack            CUP$NotQuiteJavaParser$stack,
    int                        CUP$NotQuiteJavaParser$top)
    throws java.lang.Exception
    {
              return CUP$NotQuiteJavaParser$do_action_part00000000(
                               CUP$NotQuiteJavaParser$act_num,
                               CUP$NotQuiteJavaParser$parser,
                               CUP$NotQuiteJavaParser$stack,
                               CUP$NotQuiteJavaParser$top);
    }
}

}
