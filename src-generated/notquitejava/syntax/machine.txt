===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [topLevelDecl ::= (*) functionDecl , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [topLevelDeclList ::= (*) , {EOF }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [$START ::= (*) program EOF , {EOF }]
  [classDecl ::= (*) CLASS ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [topLevelDecl ::= (*) classDecl , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [type ::= (*) exprL brackets , {ID }]
  [topLevelDeclList ::= (*) topLevelDecl topLevelDeclList , {EOF }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [classDecl ::= (*) CLASS ID EXTENDS ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [functionDecl ::= (*) type ID LPAREN paramList RPAREN block , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
  [program ::= (*) topLevelDeclList , {EOF }]
}
transition on NULL to state [21]
transition on expr2 to state [20]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on topLevelDecl to state [17]
transition on FALSE to state [16]
transition on topLevelDeclList to state [15]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on BOOLEAN to state [12]
transition on THIS to state [11]
transition on ID to state [10]
transition on program to state [9]
transition on LPAREN to state [8]
transition on exprL to state [7]
transition on TRUE to state [6]
transition on classDecl to state [5]
transition on type to state [4]
transition on INT to state [3]
transition on functionDecl to state [2]
transition on CLASS to state [1]

-------------------
lalr_state [1]: {
  [classDecl ::= CLASS (*) ID EXTENDS ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [classDecl ::= CLASS (*) ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on ID to state [125]

-------------------
lalr_state [2]: {
  [topLevelDecl ::= functionDecl (*) , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [3]: {
  [baseType ::= INT (*) , {LBRACKET LRBRACKET ID }]
}

-------------------
lalr_state [4]: {
  [functionDecl ::= type (*) ID LPAREN paramList RPAREN block , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on ID to state [80]

-------------------
lalr_state [5]: {
  [topLevelDecl ::= classDecl (*) , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [6]: {
  [expr3 ::= TRUE (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [7]: {
  [type ::= exprL (*) brackets , {ID }]
  [expr3 ::= exprL (*) , {LBRACKET DOT }]
  [brackets ::= (*) , {ID }]
  [brackets ::= (*) LRBRACKET brackets , {ID }]
}
transition on brackets to state [79]
transition on LRBRACKET to state [65]

-------------------
lalr_state [8]: {
  [expr2 ::= (*) expr3 , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= LPAREN (*) expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [77]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [9]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [76]

-------------------
lalr_state [10]: {
  [exprL ::= ID (*) , {LBRACKET LRBRACKET DOT ID }]
}

-------------------
lalr_state [11]: {
  [expr3 ::= THIS (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [12]: {
  [baseType ::= BOOLEAN (*) , {LBRACKET LRBRACKET ID }]
}

-------------------
lalr_state [13]: {
  [brackets ::= (*) , {ID }]
  [type ::= baseType (*) brackets , {ID }]
  [brackets ::= (*) LRBRACKET brackets , {ID }]
}
transition on brackets to state [75]
transition on LRBRACKET to state [65]

-------------------
lalr_state [14]: {
  [expr3 ::= NUMBER (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [15]: {
  [program ::= topLevelDeclList (*) , {EOF }]
}

-------------------
lalr_state [16]: {
  [expr3 ::= FALSE (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [17]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [topLevelDecl ::= (*) functionDecl , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [topLevelDeclList ::= (*) , {EOF }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [classDecl ::= (*) CLASS ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [topLevelDecl ::= (*) classDecl , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [type ::= (*) exprL brackets , {ID }]
  [topLevelDeclList ::= topLevelDecl (*) topLevelDeclList , {EOF }]
  [topLevelDeclList ::= (*) topLevelDecl topLevelDeclList , {EOF }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [classDecl ::= (*) CLASS ID EXTENDS ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [functionDecl ::= (*) type ID LPAREN paramList RPAREN block , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
}
transition on NULL to state [21]
transition on expr2 to state [20]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on topLevelDecl to state [17]
transition on FALSE to state [16]
transition on topLevelDeclList to state [74]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on BOOLEAN to state [12]
transition on THIS to state [11]
transition on ID to state [10]
transition on LPAREN to state [8]
transition on exprL to state [7]
transition on TRUE to state [6]
transition on classDecl to state [5]
transition on type to state [4]
transition on INT to state [3]
transition on functionDecl to state [2]
transition on CLASS to state [1]

-------------------
lalr_state [18]: {
  [baseType ::= (*) BOOLEAN , {LBRACKET }]
  [expr2 ::= NEW (*) ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= NEW (*) baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= NEW (*) ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [baseType ::= (*) INT , {LBRACKET }]
}
transition on INT to state [3]
transition on BOOLEAN to state [12]
transition on baseType to state [61]
transition on ID to state [60]

-------------------
lalr_state [19]: {
  [exprL ::= expr3 (*) LBRACKET expr RBRACKET , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr2 ::= expr3 (*) , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LBRACKET to state [57]

-------------------
lalr_state [20]: {
  [expr3 ::= expr2 (*) DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [exprL ::= expr2 (*) DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [expr3 ::= expr2 (*) DOT LENGTH , {LBRACKET DOT }]
}
transition on DOT to state [22]

-------------------
lalr_state [21]: {
  [expr3 ::= NULL (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [22]: {
  [exprL ::= expr2 DOT (*) ID , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= expr2 DOT (*) ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= expr2 DOT (*) LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LENGTH to state [24]
transition on ID to state [23]

-------------------
lalr_state [23]: {
  [expr3 ::= expr2 DOT ID (*) LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= expr2 DOT ID (*) , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
}
transition on LPAREN to state [25]

-------------------
lalr_state [24]: {
  [expr3 ::= expr2 DOT LENGTH (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [25]: {
  [expr2 ::= (*) expr3 , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprList ::= (*) , {RPAREN }]
  [expr ::= (*) expr DIV expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= expr2 DOT ID LPAREN (*) exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprList ::= (*) expr exprListRest , {RPAREN }]
  [expr ::= (*) expr TIMES expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [31]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on exprList to state [29]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [26]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= MINUS (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [56]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [27]: {
  [expr3 ::= exprL (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [28]: {
  [expr ::= expr2 (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= expr2 (*) DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= expr2 (*) DOT ID , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= expr2 (*) DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on DOT to state [22]

-------------------
lalr_state [29]: {
  [expr3 ::= expr2 DOT ID LPAREN exprList (*) RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on RPAREN to state [55]

-------------------
lalr_state [30]: {
  [expr ::= ID (*) LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= ID (*) , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
}
transition on LPAREN to state [52]

-------------------
lalr_state [31]: {
  [exprListRest ::= (*) , {RPAREN }]
  [exprList ::= expr (*) exprListRest , {RPAREN }]
  [expr ::= expr (*) PLUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprListRest ::= (*) COMMA expr exprListRest , {RPAREN }]
  [expr ::= expr (*) AND expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) DIV expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on EQUALS to state [34]
transition on TIMES to state [40]
transition on COMMA to state [49]
transition on LESS to state [38]
transition on DIV to state [39]
transition on exprListRest to state [48]
transition on PLUS to state [36]
transition on AND to state [35]
transition on MINUS to state [37]

-------------------
lalr_state [32]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= NEG (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [33]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [33]: {
  [expr ::= NEG expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [34]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr EQUALS (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [47]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [35]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr AND (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [46]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [36]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr PLUS (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [45]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [37]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr MINUS (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [44]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [38]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr LESS (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [43]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [39]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr DIV (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [42]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [40]: {
  [expr2 ::= (*) expr3 , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr TIMES (*) expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [41]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [41]: {
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr TIMES expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [42]: {
  [expr ::= expr DIV expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [43]: {
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr LESS expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [44]: {
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr MINUS expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [45]: {
  [expr ::= expr PLUS expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [46]: {
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr AND expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [47]: {
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr EQUALS expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [48]: {
  [exprList ::= expr exprListRest (*) , {RPAREN }]
}

-------------------
lalr_state [49]: {
  [expr2 ::= (*) expr3 , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprListRest ::= COMMA (*) expr exprListRest , {RPAREN }]
  [expr ::= (*) expr AND expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [50]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [50]: {
  [exprListRest ::= (*) , {RPAREN }]
  [expr ::= expr (*) PLUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprListRest ::= COMMA expr (*) exprListRest , {RPAREN }]
  [expr ::= expr (*) LESS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprListRest ::= (*) COMMA expr exprListRest , {RPAREN }]
  [expr ::= expr (*) AND expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) DIV expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on EQUALS to state [34]
transition on TIMES to state [40]
transition on COMMA to state [49]
transition on LESS to state [38]
transition on DIV to state [39]
transition on exprListRest to state [51]
transition on PLUS to state [36]
transition on AND to state [35]
transition on MINUS to state [37]

-------------------
lalr_state [51]: {
  [exprListRest ::= COMMA expr exprListRest (*) , {RPAREN }]
}

-------------------
lalr_state [52]: {
  [expr2 ::= (*) expr3 , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprList ::= (*) , {RPAREN }]
  [expr ::= ID LPAREN (*) exprList RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RPAREN DOT COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprList ::= (*) expr exprListRest , {RPAREN }]
  [expr ::= (*) expr TIMES expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RPAREN COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [31]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on exprList to state [53]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [53]: {
  [expr ::= ID LPAREN exprList (*) RPAREN , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on RPAREN to state [54]

-------------------
lalr_state [54]: {
  [expr ::= ID LPAREN exprList RPAREN (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [55]: {
  [expr3 ::= expr2 DOT ID LPAREN exprList RPAREN (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [56]: {
  [expr ::= expr (*) DIV expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= MINUS expr (*) , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET RPAREN SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [57]: {
  [expr2 ::= (*) expr3 , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= expr3 LBRACKET (*) expr RBRACKET , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [58]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [58]: {
  [expr ::= expr (*) DIV expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= expr3 LBRACKET expr (*) RBRACKET , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on RBRACKET to state [59]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [59]: {
  [exprL ::= expr3 LBRACKET expr RBRACKET (*) , {LBRACKET RBRACKET LRBRACKET RPAREN DOT SEMI COMMA EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
}

-------------------
lalr_state [60]: {
  [expr2 ::= NEW ID (*) LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= NEW ID (*) LPAREN RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LBRACKET to state [69]
transition on LPAREN to state [68]

-------------------
lalr_state [61]: {
  [expr2 ::= NEW baseType (*) LBRACKET expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LBRACKET to state [62]

-------------------
lalr_state [62]: {
  [expr2 ::= (*) expr3 , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= NEW baseType LBRACKET (*) expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [63]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [63]: {
  [expr ::= expr (*) DIV expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= NEW baseType LBRACKET expr (*) RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on RBRACKET to state [64]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [64]: {
  [expr2 ::= NEW baseType LBRACKET expr RBRACKET (*) brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [brackets ::= (*) , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [brackets ::= (*) LRBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on brackets to state [66]
transition on LRBRACKET to state [65]

-------------------
lalr_state [65]: {
  [brackets ::= (*) , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [brackets ::= LRBRACKET (*) brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [brackets ::= (*) LRBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
}
transition on brackets to state [67]
transition on LRBRACKET to state [65]

-------------------
lalr_state [66]: {
  [expr2 ::= NEW baseType LBRACKET expr RBRACKET brackets (*) , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [67]: {
  [brackets ::= LRBRACKET brackets (*) , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
}

-------------------
lalr_state [68]: {
  [expr3 ::= NEW ID LPAREN (*) RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on RPAREN to state [73]

-------------------
lalr_state [69]: {
  [expr2 ::= (*) expr3 , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= NEW ID LBRACKET (*) expr RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RBRACKET DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [70]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [70]: {
  [expr2 ::= NEW ID LBRACKET expr (*) RBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) DIV expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RBRACKET AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on RBRACKET to state [71]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [71]: {
  [brackets ::= (*) , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [brackets ::= (*) LRBRACKET brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= NEW ID LBRACKET expr RBRACKET (*) brackets , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on brackets to state [72]
transition on LRBRACKET to state [65]

-------------------
lalr_state [72]: {
  [expr2 ::= NEW ID LBRACKET expr RBRACKET brackets (*) , {RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [73]: {
  [expr3 ::= NEW ID LPAREN RPAREN (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [74]: {
  [topLevelDeclList ::= topLevelDecl topLevelDeclList (*) , {EOF }]
}

-------------------
lalr_state [75]: {
  [type ::= baseType brackets (*) , {ID }]
}

-------------------
lalr_state [76]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [77]: {
  [expr ::= expr (*) DIV expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= LPAREN expr (*) RPAREN , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]
transition on RPAREN to state [78]

-------------------
lalr_state [78]: {
  [expr3 ::= LPAREN expr RPAREN (*) , {LBRACKET RBRACKET RPAREN DOT SEMI COMMA AND PLUS MINUS TIMES DIV LESS EQUALS }]
}

-------------------
lalr_state [79]: {
  [type ::= exprL brackets (*) , {ID }]
}

-------------------
lalr_state [80]: {
  [functionDecl ::= type ID (*) LPAREN paramList RPAREN block , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on LPAREN to state [81]

-------------------
lalr_state [81]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [paramList ::= (*) varDecl paramListRest , {RPAREN }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [varDecl ::= (*) type ID , {RPAREN COMMA }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [paramList ::= (*) , {RPAREN }]
  [type ::= (*) exprL brackets , {ID }]
  [functionDecl ::= type ID LPAREN (*) paramList RPAREN block , {EOF NEW BOOLEAN THIS INT CLASS RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
}
transition on paramList to state [84]
transition on LPAREN to state [8]
transition on THIS to state [11]
transition on type to state [83]
transition on baseType to state [13]
transition on ID to state [10]
transition on FALSE to state [16]
transition on expr2 to state [20]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on BOOLEAN to state [12]
transition on TRUE to state [6]
transition on exprL to state [7]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on INT to state [3]
transition on varDecl to state [82]

-------------------
lalr_state [82]: {
  [paramListRest ::= (*) , {RPAREN }]
  [paramList ::= varDecl (*) paramListRest , {RPAREN }]
  [paramListRest ::= (*) COMMA varDecl paramListRest , {RPAREN }]
}
transition on paramListRest to state [122]
transition on COMMA to state [121]

-------------------
lalr_state [83]: {
  [varDecl ::= type (*) ID , {RPAREN SEMI COMMA }]
}
transition on ID to state [120]

-------------------
lalr_state [84]: {
  [functionDecl ::= type ID LPAREN paramList (*) RPAREN block , {EOF NEW BOOLEAN THIS INT CLASS RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on RPAREN to state [85]

-------------------
lalr_state [85]: {
  [block ::= (*) LBRACE statementList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [functionDecl ::= type ID LPAREN paramList RPAREN (*) block , {EOF NEW BOOLEAN THIS INT CLASS RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on block to state [87]
transition on LBRACE to state [86]

-------------------
lalr_state [86]: {
  [expr3 ::= (*) THIS , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) block , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [type ::= (*) baseType brackets , {ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) exprL EQ expr SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [statementList ::= (*) blockStatement statementList , {RBRACE }]
  [expr3 ::= (*) NULL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [type ::= (*) exprL brackets , {ID }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) error SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [statementList ::= (*) , {RBRACE }]
  [varDecl ::= (*) type ID , {SEMI }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) expr3 , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [blockStatement ::= (*) statement , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr3 ::= (*) exprL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) RETURN expr SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [blockStatement ::= (*) varDecl SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [block ::= LBRACE (*) statementList RBRACE , {EOF error NEW IF BOOLEAN THIS ELSE RETURN INT CLASS WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [statement ::= (*) expr SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [block ::= (*) LBRACE statementList RBRACE , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on NULL to state [21]
transition on expr2 to state [28]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on error to state [98]
transition on MINUS to state [26]
transition on FALSE to state [16]
transition on statementList to state [97]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on blockStatement to state [96]
transition on BOOLEAN to state [12]
transition on varDecl to state [95]
transition on THIS to state [11]
transition on ID to state [30]
transition on block to state [94]
transition on LPAREN to state [8]
transition on LBRACE to state [86]
transition on IF to state [93]
transition on exprL to state [92]
transition on TRUE to state [6]
transition on RETURN to state [91]
transition on type to state [83]
transition on WHILE to state [90]
transition on INT to state [3]
transition on expr to state [89]
transition on NEG to state [32]
transition on statement to state [88]

-------------------
lalr_state [87]: {
  [functionDecl ::= type ID LPAREN paramList RPAREN block (*) , {EOF NEW BOOLEAN THIS INT CLASS RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [88]: {
  [blockStatement ::= statement (*) , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [89]: {
  [expr ::= expr (*) DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= expr (*) SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= expr (*) EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on SEMI to state [119]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [90]: {
  [statement ::= WHILE (*) LPAREN expr RPAREN statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on LPAREN to state [115]

-------------------
lalr_state [91]: {
  [expr2 ::= (*) expr3 , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= RETURN (*) expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= (*) expr PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [113]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [92]: {
  [type ::= exprL (*) brackets , {ID }]
  [expr3 ::= exprL (*) , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= exprL (*) EQ expr SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [brackets ::= (*) , {ID }]
  [brackets ::= (*) LRBRACKET brackets , {ID }]
}
transition on brackets to state [79]
transition on LRBRACKET to state [65]
transition on EQ to state [108]

-------------------
lalr_state [93]: {
  [statement ::= IF (*) LPAREN expr RPAREN statement ELSE statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on LPAREN to state [103]

-------------------
lalr_state [94]: {
  [statement ::= block (*) , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [95]: {
  [blockStatement ::= varDecl (*) SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on SEMI to state [102]

-------------------
lalr_state [96]: {
  [expr3 ::= (*) THIS , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) block , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [type ::= (*) baseType brackets , {ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) exprL EQ expr SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [statementList ::= blockStatement (*) statementList , {RBRACE }]
  [statementList ::= (*) blockStatement statementList , {RBRACE }]
  [expr3 ::= (*) NULL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [type ::= (*) exprL brackets , {ID }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) error SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [statementList ::= (*) , {RBRACE }]
  [varDecl ::= (*) type ID , {SEMI }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) expr3 , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [blockStatement ::= (*) statement , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr3 ::= (*) exprL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) RETURN expr SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [blockStatement ::= (*) varDecl SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) expr SEMI , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [block ::= (*) LBRACE statementList RBRACE , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on NULL to state [21]
transition on expr2 to state [28]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on error to state [98]
transition on MINUS to state [26]
transition on FALSE to state [16]
transition on statementList to state [101]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on blockStatement to state [96]
transition on BOOLEAN to state [12]
transition on varDecl to state [95]
transition on THIS to state [11]
transition on ID to state [30]
transition on block to state [94]
transition on LPAREN to state [8]
transition on LBRACE to state [86]
transition on IF to state [93]
transition on exprL to state [92]
transition on TRUE to state [6]
transition on RETURN to state [91]
transition on type to state [83]
transition on WHILE to state [90]
transition on INT to state [3]
transition on expr to state [89]
transition on NEG to state [32]
transition on statement to state [88]

-------------------
lalr_state [97]: {
  [block ::= LBRACE statementList (*) RBRACE , {EOF error NEW IF BOOLEAN THIS ELSE RETURN INT CLASS WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on RBRACE to state [100]

-------------------
lalr_state [98]: {
  [statement ::= error (*) SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on SEMI to state [99]

-------------------
lalr_state [99]: {
  [statement ::= error SEMI (*) , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [100]: {
  [block ::= LBRACE statementList RBRACE (*) , {EOF error NEW IF BOOLEAN THIS ELSE RETURN INT CLASS WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [101]: {
  [statementList ::= blockStatement statementList (*) , {RBRACE }]
}

-------------------
lalr_state [102]: {
  [blockStatement ::= varDecl SEMI (*) , {error NEW IF BOOLEAN THIS RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [103]: {
  [expr2 ::= (*) expr3 , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= IF LPAREN (*) expr RPAREN statement ELSE statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= (*) expr DIV expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [104]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [104]: {
  [expr ::= expr (*) DIV expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= IF LPAREN expr (*) RPAREN statement ELSE statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= expr (*) EQUALS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]
transition on RPAREN to state [105]

-------------------
lalr_state [105]: {
  [expr3 ::= (*) THIS , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) block , {ELSE }]
  [exprL ::= (*) ID , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) exprL EQ expr SEMI , {ELSE }]
  [statement ::= IF LPAREN expr RPAREN (*) statement ELSE statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) NULL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {ELSE }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) error SEMI , {ELSE }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) expr3 , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {ELSE }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) RETURN expr SEMI , {ELSE }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) expr SEMI , {ELSE }]
  [block ::= (*) LBRACE statementList RBRACE , {ELSE }]
}
transition on NULL to state [21]
transition on expr2 to state [28]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on error to state [98]
transition on MINUS to state [26]
transition on FALSE to state [16]
transition on NUMBER to state [14]
transition on THIS to state [11]
transition on ID to state [30]
transition on block to state [94]
transition on LPAREN to state [8]
transition on LBRACE to state [86]
transition on IF to state [93]
transition on exprL to state [107]
transition on TRUE to state [6]
transition on RETURN to state [91]
transition on WHILE to state [90]
transition on expr to state [89]
transition on NEG to state [32]
transition on statement to state [106]

-------------------
lalr_state [106]: {
  [statement ::= IF LPAREN expr RPAREN statement (*) ELSE statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on ELSE to state [111]

-------------------
lalr_state [107]: {
  [expr3 ::= exprL (*) , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= exprL (*) EQ expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on EQ to state [108]

-------------------
lalr_state [108]: {
  [expr2 ::= (*) expr3 , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= exprL EQ (*) expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= (*) expr TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [109]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [109]: {
  [statement ::= exprL EQ expr (*) SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= expr (*) DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on SEMI to state [110]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [110]: {
  [statement ::= exprL EQ expr SEMI (*) , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [111]: {
  [expr3 ::= (*) THIS , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) block , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) exprL EQ expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [statement ::= IF LPAREN expr RPAREN statement ELSE (*) statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) NULL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) error SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) expr3 , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) RETURN expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [block ::= (*) LBRACE statementList RBRACE , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on NULL to state [21]
transition on expr2 to state [28]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on error to state [98]
transition on MINUS to state [26]
transition on FALSE to state [16]
transition on NUMBER to state [14]
transition on THIS to state [11]
transition on ID to state [30]
transition on block to state [94]
transition on LPAREN to state [8]
transition on LBRACE to state [86]
transition on IF to state [93]
transition on exprL to state [107]
transition on TRUE to state [6]
transition on RETURN to state [91]
transition on WHILE to state [90]
transition on expr to state [89]
transition on NEG to state [32]
transition on statement to state [112]

-------------------
lalr_state [112]: {
  [statement ::= IF LPAREN expr RPAREN statement ELSE statement (*) , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [113]: {
  [statement ::= RETURN expr (*) SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= expr (*) DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on SEMI to state [114]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]

-------------------
lalr_state [114]: {
  [statement ::= RETURN expr SEMI (*) , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [115]: {
  [expr2 ::= (*) expr3 , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) FALSE , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NULL , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NUMBER , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= WHILE LPAREN (*) expr RPAREN statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= (*) expr AND expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) THIS , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) ID , {LBRACKET RPAREN DOT AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on LPAREN to state [8]
transition on NEG to state [32]
transition on expr to state [116]
transition on THIS to state [11]
transition on ID to state [30]
transition on FALSE to state [16]
transition on expr2 to state [28]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on TRUE to state [6]
transition on exprL to state [27]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on MINUS to state [26]

-------------------
lalr_state [116]: {
  [expr ::= expr (*) DIV expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= WHILE LPAREN expr (*) RPAREN statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr ::= expr (*) PLUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) LESS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) TIMES expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) AND expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) EQUALS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= expr (*) MINUS expr , {RPAREN AND PLUS MINUS TIMES DIV LESS EQUALS }]
}
transition on TIMES to state [40]
transition on DIV to state [39]
transition on LESS to state [38]
transition on MINUS to state [37]
transition on PLUS to state [36]
transition on AND to state [35]
transition on EQUALS to state [34]
transition on RPAREN to state [117]

-------------------
lalr_state [117]: {
  [expr3 ::= (*) THIS , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) block , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) NEG expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) exprL EQ expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) NULL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr TIMES expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) MINUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) error SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [statement ::= WHILE LPAREN expr RPAREN (*) statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr2 ::= (*) expr3 , {DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr DIV expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) ID LPAREN exprList RPAREN , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr AND expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) exprL , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr EQUALS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) RETURN expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr2 , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr PLUS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET DOT SEMI EQ AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [expr ::= (*) expr LESS expr , {SEMI AND PLUS MINUS TIMES DIV LESS EQUALS }]
  [statement ::= (*) expr SEMI , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
  [block ::= (*) LBRACE statementList RBRACE , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}
transition on NULL to state [21]
transition on expr2 to state [28]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on error to state [98]
transition on MINUS to state [26]
transition on FALSE to state [16]
transition on NUMBER to state [14]
transition on THIS to state [11]
transition on ID to state [30]
transition on block to state [94]
transition on LPAREN to state [8]
transition on LBRACE to state [86]
transition on IF to state [93]
transition on exprL to state [107]
transition on TRUE to state [6]
transition on RETURN to state [91]
transition on WHILE to state [90]
transition on expr to state [89]
transition on NEG to state [32]
transition on statement to state [118]

-------------------
lalr_state [118]: {
  [statement ::= WHILE LPAREN expr RPAREN statement (*) , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [119]: {
  [statement ::= expr SEMI (*) , {error NEW IF BOOLEAN THIS ELSE RETURN INT WHILE LBRACE RBRACE LPAREN NEG MINUS TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [120]: {
  [varDecl ::= type ID (*) , {RPAREN SEMI COMMA }]
}

-------------------
lalr_state [121]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [paramListRest ::= COMMA (*) varDecl paramListRest , {RPAREN }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [varDecl ::= (*) type ID , {RPAREN COMMA }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [type ::= (*) exprL brackets , {ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
}
transition on LPAREN to state [8]
transition on THIS to state [11]
transition on type to state [83]
transition on baseType to state [13]
transition on ID to state [10]
transition on FALSE to state [16]
transition on expr2 to state [20]
transition on NULL to state [21]
transition on expr3 to state [19]
transition on BOOLEAN to state [12]
transition on TRUE to state [6]
transition on exprL to state [7]
transition on NUMBER to state [14]
transition on NEW to state [18]
transition on INT to state [3]
transition on varDecl to state [123]

-------------------
lalr_state [122]: {
  [paramList ::= varDecl paramListRest (*) , {RPAREN }]
}

-------------------
lalr_state [123]: {
  [paramListRest ::= (*) , {RPAREN }]
  [paramListRest ::= COMMA varDecl (*) paramListRest , {RPAREN }]
  [paramListRest ::= (*) COMMA varDecl paramListRest , {RPAREN }]
}
transition on paramListRest to state [124]
transition on COMMA to state [121]

-------------------
lalr_state [124]: {
  [paramListRest ::= COMMA varDecl paramListRest (*) , {RPAREN }]
}

-------------------
lalr_state [125]: {
  [classDecl ::= CLASS ID (*) EXTENDS ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [classDecl ::= CLASS ID (*) LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on EXTENDS to state [127]
transition on LBRACE to state [126]

-------------------
lalr_state [126]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [memberDeclList ::= (*) , {RBRACE }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [memberDeclList ::= (*) varDecl SEMI memberDeclList , {RBRACE }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [classDecl ::= CLASS ID LBRACE (*) memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [varDecl ::= (*) type ID , {SEMI }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [memberDeclList ::= (*) functionDecl memberDeclList , {RBRACE }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [type ::= (*) exprL brackets , {ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [functionDecl ::= (*) type ID LPAREN paramList RPAREN block , {NEW BOOLEAN THIS INT RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
}
transition on NULL to state [21]
transition on expr2 to state [20]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on FALSE to state [16]
transition on memberDeclList to state [139]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on BOOLEAN to state [12]
transition on varDecl to state [132]
transition on THIS to state [11]
transition on ID to state [10]
transition on LPAREN to state [8]
transition on exprL to state [7]
transition on TRUE to state [6]
transition on type to state [131]
transition on INT to state [3]
transition on functionDecl to state [130]

-------------------
lalr_state [127]: {
  [classDecl ::= CLASS ID EXTENDS (*) ID LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on ID to state [128]

-------------------
lalr_state [128]: {
  [classDecl ::= CLASS ID EXTENDS ID (*) LBRACE memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on LBRACE to state [129]

-------------------
lalr_state [129]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [memberDeclList ::= (*) , {RBRACE }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [memberDeclList ::= (*) varDecl SEMI memberDeclList , {RBRACE }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [varDecl ::= (*) type ID , {SEMI }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [memberDeclList ::= (*) functionDecl memberDeclList , {RBRACE }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [type ::= (*) exprL brackets , {ID }]
  [classDecl ::= CLASS ID EXTENDS ID LBRACE (*) memberDeclList RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [functionDecl ::= (*) type ID LPAREN paramList RPAREN block , {NEW BOOLEAN THIS INT RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
}
transition on NULL to state [21]
transition on expr2 to state [20]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on FALSE to state [16]
transition on memberDeclList to state [133]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on BOOLEAN to state [12]
transition on varDecl to state [132]
transition on THIS to state [11]
transition on ID to state [10]
transition on LPAREN to state [8]
transition on exprL to state [7]
transition on TRUE to state [6]
transition on type to state [131]
transition on INT to state [3]
transition on functionDecl to state [130]

-------------------
lalr_state [130]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [memberDeclList ::= (*) , {RBRACE }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [memberDeclList ::= (*) varDecl SEMI memberDeclList , {RBRACE }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [varDecl ::= (*) type ID , {SEMI }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [memberDeclList ::= functionDecl (*) memberDeclList , {RBRACE }]
  [memberDeclList ::= (*) functionDecl memberDeclList , {RBRACE }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [type ::= (*) exprL brackets , {ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [functionDecl ::= (*) type ID LPAREN paramList RPAREN block , {NEW BOOLEAN THIS INT RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
}
transition on NULL to state [21]
transition on expr2 to state [20]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on FALSE to state [16]
transition on memberDeclList to state [138]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on BOOLEAN to state [12]
transition on varDecl to state [132]
transition on THIS to state [11]
transition on ID to state [10]
transition on LPAREN to state [8]
transition on exprL to state [7]
transition on TRUE to state [6]
transition on type to state [131]
transition on INT to state [3]
transition on functionDecl to state [130]

-------------------
lalr_state [131]: {
  [functionDecl ::= type (*) ID LPAREN paramList RPAREN block , {NEW BOOLEAN THIS INT RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [varDecl ::= type (*) ID , {SEMI }]
}
transition on ID to state [137]

-------------------
lalr_state [132]: {
  [memberDeclList ::= varDecl (*) SEMI memberDeclList , {RBRACE }]
}
transition on SEMI to state [135]

-------------------
lalr_state [133]: {
  [classDecl ::= CLASS ID EXTENDS ID LBRACE memberDeclList (*) RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on RBRACE to state [134]

-------------------
lalr_state [134]: {
  [classDecl ::= CLASS ID EXTENDS ID LBRACE memberDeclList RBRACE (*) , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}

-------------------
lalr_state [135]: {
  [expr2 ::= (*) expr3 , {DOT }]
  [expr3 ::= (*) FALSE , {LBRACKET DOT }]
  [memberDeclList ::= (*) , {RBRACE }]
  [expr3 ::= (*) exprL , {LBRACKET DOT }]
  [memberDeclList ::= varDecl SEMI (*) memberDeclList , {RBRACE }]
  [expr2 ::= (*) NEW baseType LBRACKET expr RBRACKET brackets , {DOT }]
  [expr3 ::= (*) NEW ID LPAREN RPAREN , {LBRACKET DOT }]
  [memberDeclList ::= (*) varDecl SEMI memberDeclList , {RBRACE }]
  [expr3 ::= (*) NULL , {LBRACKET DOT }]
  [exprL ::= (*) expr2 DOT ID , {LBRACKET LRBRACKET DOT ID }]
  [type ::= (*) baseType brackets , {ID }]
  [expr3 ::= (*) expr2 DOT LENGTH , {LBRACKET DOT }]
  [expr3 ::= (*) NUMBER , {LBRACKET DOT }]
  [varDecl ::= (*) type ID , {SEMI }]
  [exprL ::= (*) expr3 LBRACKET expr RBRACKET , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) BOOLEAN , {LRBRACKET ID }]
  [expr2 ::= (*) NEW ID LBRACKET expr RBRACKET brackets , {DOT }]
  [memberDeclList ::= (*) functionDecl memberDeclList , {RBRACE }]
  [expr3 ::= (*) TRUE , {LBRACKET DOT }]
  [expr3 ::= (*) LPAREN expr RPAREN , {LBRACKET DOT }]
  [type ::= (*) exprL brackets , {ID }]
  [expr3 ::= (*) expr2 DOT ID LPAREN exprList RPAREN , {LBRACKET DOT }]
  [expr3 ::= (*) THIS , {LBRACKET DOT }]
  [functionDecl ::= (*) type ID LPAREN paramList RPAREN block , {NEW BOOLEAN THIS INT RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [exprL ::= (*) ID , {LBRACKET LRBRACKET DOT ID }]
  [baseType ::= (*) INT , {LRBRACKET ID }]
}
transition on NULL to state [21]
transition on expr2 to state [20]
transition on expr3 to state [19]
transition on NEW to state [18]
transition on FALSE to state [16]
transition on memberDeclList to state [136]
transition on NUMBER to state [14]
transition on baseType to state [13]
transition on BOOLEAN to state [12]
transition on varDecl to state [132]
transition on THIS to state [11]
transition on ID to state [10]
transition on LPAREN to state [8]
transition on exprL to state [7]
transition on TRUE to state [6]
transition on type to state [131]
transition on INT to state [3]
transition on functionDecl to state [130]

-------------------
lalr_state [136]: {
  [memberDeclList ::= varDecl SEMI memberDeclList (*) , {RBRACE }]
}

-------------------
lalr_state [137]: {
  [functionDecl ::= type ID (*) LPAREN paramList RPAREN block , {NEW BOOLEAN THIS INT RBRACE LPAREN TRUE FALSE NULL NUMBER ID }]
  [varDecl ::= type ID (*) , {SEMI }]
}
transition on LPAREN to state [81]

-------------------
lalr_state [138]: {
  [memberDeclList ::= functionDecl memberDeclList (*) , {RBRACE }]
}

-------------------
lalr_state [139]: {
  [classDecl ::= CLASS ID LBRACE memberDeclList (*) RBRACE , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}
transition on RBRACE to state [140]

-------------------
lalr_state [140]: {
  [classDecl ::= CLASS ID LBRACE memberDeclList RBRACE (*) , {EOF NEW BOOLEAN THIS INT CLASS LPAREN TRUE FALSE NULL NUMBER ID }]
}

-------------------
